---
layout:     post
title:      "知识点扫雷"
subtitle:   "学习、记录"
date:       2020-01-07 15:01:04
author:     "Thq" 
header-img: "img/contact-bg.jpg"
catalog: true
tags:
    - CSS
---

## `CSS`选择器，以及优先级

+ !important
+ 内联样式: 1000
+ ID选择器: 0100
+ 类选择器: 0010
+ 属性选择器: 0010
+ 伪类选择器(a:visited，a:actived),单冒号: 0010
+ 类型选择器: 0001
+ 紧邻兄弟选择器(A+B): 0001
+ 一般兄弟选择器(A~B),A、B同父节点,且B在A后面任意位置: 0001
+ 子选择器(A>B)匹配A的直接子节点: 0001
+ 后代选择器(A B): 0001
+ 伪元素选择器(a::before，p::first-line),所有未被包含在HTML的实体,双冒号: 0001
+ 通用选择器: 0000

## BFC

BFC:块级格式化上下文(Block Formatting Context),决定了元素如何对其内容进行定位以及与其他元素的关系和相互作用。

## flex

flex: 1; === flex: 1 1 auto; === flex-grow: 1; flex-shrink: 1; flex-basis: auto;

flex-grow: 拉伸因子,默认值为0; flex-shrink: 收缩规则,默认值为1; flex-basis: 元素的初始值,默认值为auto;

## 跨域

CORS和Express proxy代理

iframe：通过postMessage

## GET POST

都是基于TCP链接，本质上无差别，浏览器实现有区别，get参数在url上，post参数在body。post会比get多请求一次，post第一次会通知服务器要请求了，效率差别不大，但是不能用get代替post

## target currentTarget

currentTarget始终是监听事件者，而target是事件的真正发出者。

## position: absolute; 基于非`static`定位的父级的border定位

## hooks throttle用法

```JS
const [praiseNum, setPraiseNum] = useState(0);
const _throttle = useRef(
    throttle(newVal => {
        if (newVal > 0) {
            livePraise(liveId, newVal).then(res => {
                setPraiseNum(0);
            });
        }
    }, 3000),
);

useEffect(() => {
    _throttle.current(praiseNum);
}, [praiseNum]);

const praise = () => {
    setPraiseNum(praiseNum + 1);
};
```

## RTPM和HLS

直播常用的两种协议

+ RTMP(Real-Time messaging Protocol)

基于Adobe，FlashPlayer，有1-3秒的延迟，推流使用的多 移动端不支持 PC端需基于Flash

+ HTTP-FLV

Adobe公司主推，格式简单，延时低，但手机支持度有限，iOS支持度不好。

+ HLS(Http Living Stream)

苹果基于HTTP的流媒体传输协议，H5可以直接打开，直播流是一个m3u8文件，延迟偏高。IOS支持度好 移动端主流

### async/await

```JS
async function async1(){
   console.log('async1 start');
    await async2();
    console.log('async1 end')
}
async function async2(){
    console.log('async2')
}

console.log('script start');
async1();
console.log('script end')

// 输出顺序：script start->async1 start->async2->script end->async1 end
```

async 函数返回一个 Promise 对象，当函数执行的时候，一旦遇到 await 就会先返回，等到触发的异步操作完成，再执行函数体内后面的语句。可以理解为，是让出了线程，跳出了 async 函数体。

### BigInt

// 字符串转BigInt
`BigInt('123') => 123n`
`BigInt('123') + 1n => 124n`
`(BigInt('123') + 1n).toString() => 124`

// 2进制转BigInt
`BigInt('0b' + a)`

// 8进制转BigInt
`BigInt('0o' + a)`

// 16进制转BigInt
`BigInt('0x' + a)`

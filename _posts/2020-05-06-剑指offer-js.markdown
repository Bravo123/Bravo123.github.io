---
layout:     post
title:      "剑指offer-JS-题解"
subtitle:   "刷刷刷"
date:       2020-05-06 17:43:30
author:     "Thq" 
header-img: "img/post-sample-image.jpg"
catalog: true
tags:
    - algorithm
---

> 你爱自由胜过爱我 day1

#### 在一个二维数组中（每个一维数组的长度相同），每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。

```Js
// 普通解法
function Find(target, array) {
    let xLen = array.length, yLen = array[0].length;
    if (target < array[0][0]) return false;
    if (target > array[xLen - 1][yLen - 1]) return false;
    let x = 0, y = 0;
    for (y; y < yLen; y++) {
        for (x = 0; x < xLen; x++) {
            if (target >= array[x][y]) {
                if (target === array[x][y]) return true;
                continue;
            }
            break;
        }
    }
    return false;
}

// 二分解法
function Find(target, array) {
    let xLen = array.length, yLen = array[0].length;
    if (target < array[0][0]) return false;
    if (target > array[xLen - 1][yLen - 1]) return false;
    for (let x = 0; x < xLen; x++) {
        let low = 0, high = array[0].length;
        while(low <= high) {
            let middle = Math.floor((low + high) / 2);
            if (array[x][middle] === target) {
                return true;
            } else if (array[x][middle] > target) {
                high = middle - 1;
            } else {
                low = middle + 1;
            }
        }
    }
    return false;
}
```

> 如果云层是天空的一封信 day2

#### 请实现一个函数，将一个字符串中的每个空格替换成“%20”。例如，当字符串为We Are Happy.则经过替换之后的字符串为We%20Are%20Happy

```Js
// string的replace方法
function replaceSpace(str) {
    // write code here
    return str.replace(/ /g, '%20');
}

function replaceSpace(str) {
    // write code here
    let result = '';
    for (let i = 0; i < str.length; i++) {
        if (str[i] === ' ') {
            result += '%20';
        } else {
            result += str[i];
        }
    }
    return result;
}

```

#### 输入一个链表，按链表从尾到头的顺序返回一个ArrayList 

```Js
/*function ListNode(x){
    this.val = x;
    this.next = null;
}*/
function printListFromTailToHead(head) {
    // write code here
    var res = [];
    while (head != null) {
        res.unshift(head.val);
        head = head.next;
    }
    return res;
}
```

> 想去大公司咯 day3

#### 用两个栈来实现一个队列，完成队列的Push和Pop操作。 队列中的元素为int类型。

```Js
// 正常版
var storeStack = [];
var outStack = [];
function push(node) {
    storeStack.push(node);
}
function pop() {
    if (outStack.length === 0) {
        while (storeStack.length !== 0) {
            outStack.push(storeStack.pop());
        }
    }
    return outStack.pop();
}

// 偷懒版
var storeStack = [];
var outStack = [];
function push(node) {
    storeStack.push(node);
}
function pop() {
   return storeStack.unshift();
}

```

#### 把一个数组最开始的若干个元素搬到数组的末尾，我们称之为数组的旋转。输入一个非递减排序的数组的一个旋转，输出旋转数组的最小元素。例如数组{3,4,5,1,2}为{1,2,3,4,5}的一个旋转，该数组的最小值为1。NOTE：给出的所有元素都大于0，若数组大小为0，请返回0。

```Js
function minNumberInRotateArray(rotateArray) {
    // 首尾双指针
    let len = rotateArray.length;
    if (!len) return 0;
    let left = 0, right = len - 1, min;
    while(left !== right) {
        if (rotateArray[left] > rotateArray[right]) {
            left++;
            min = rotateArray[right];
        } else {
            right--;
            min = rotateArray[left]
        }
    }
    return min;
}
```

> day4

#### 斐波那契数列

```JS
// 递归
function Fibonacci(n) {
    if (n === 0) return 0;
    if (n === 1) return 1;
    return fibo(n - 1) + fibo(n - 2);
}

// 循环
function Fibonacci(n) {
    if (n === 0) return 0;
    if (n === 1) return 1;
    let f1 = 0; f2 = 1, result = 0;
    for (let i = 1; i < n; i++) {
        result = f1 + f2;
        f1 = f2;
        f2 = result;
    }
    return result;
}
```

> lucky day5

#### 一只青蛙一次可以跳上1级台阶，也可以跳上2级。求该青蛙跳上一个n级的台阶总共有多少种跳法（先后次序不同算不同的结果）。

```JS
// 解法同上，斐波那契数列
```

#### 一只青蛙一次可以跳上1级台阶，也可以跳上2级……它也可以跳上n级。求该青蛙跳上一个n级的台阶总共有多少种跳法。

```JS
function jumpFloorII(number) {
    return Math.pow(2, number - 1);
}
```

> day5 

#### 我们可以用2*1的小矩形横着或者竖着去覆盖更大的矩形。请问用n个2*1的小矩形无重叠地覆盖一个2*n的大矩形，总共有多少种方法

```Js
// 本质还是斐波那契数列
function rectCover(number) {
    // write code here
    if (number === 1) return 1;
    let f1 = 0; f2 = 1, result = 0;
    for (let i = 1; i <= number; i++) {
        result = f1 + f2;
        f1 = f2;
        f2 = result;
    }
    return result;
}
```

#### 输入一个整数，输出该数二进制表示中1的个数。其中负数用补码表示。

```Js
function NumberOf1(n) {
    // write code here
    if(n < 0){
        n = n >>> 0;  
    }
    var arr = n.toString(2).split('1');
    return arr.length-1;
}
```

#### 输入一个整数数组，实现一个函数来调整该数组中数字的顺序，使得所有的奇数位于数组的前半部分，所有的偶数位于数组的后半部分，并保证奇数和奇数，偶数和偶数之间的相对位置不变。

```JS
function reOrderArray(array) {
    // write code here
    let result = [], result1 = [];
    result = array.filter(item => item % 2 !== 0);
    result1 = array.filter(item => item % 2 === 0);
    return result.concat(result1);
}
```

#### 数组中有一个数字出现的次数超过数组长度的一半，请找出这个数字。例如输入一个长度为9的数组{1,2,3,2,2,2,5,4,2}。由于数字2在数组中出现了5次，超过数组长度的一半，因此输出2。如果不存在则输出0

```JS
function MoreThanHalfNum_Solution(numbers)
{
    // write code here
    let limit = numbers.length / 2;
    let obj = {}, max = 0, value = 0;
    for (let i = 0; i < numbers.length; i++) {
        if (!obj[numbers[i]]) {
            obj[numbers[i]] = 1;
        } else {
            obj[numbers[i]]++;
        }
    }
    for (let key in obj) {
        if (max < obj[key]) {
            max = obj[key];
            value = key;
        }
    }
    return max > limit ? value : 0;
}
```

#### 输入n个整数，找出其中最小的K个数。例如输入4,5,1,6,2,7,3,8这8个数字，则最小的4个数字是1,2,3,4 

```JS
function GetLeastNumbers_Solution(input, k)
{
    // write code here
    let arr = input.sort((a, b) => a - b);
    return k > arr.length ? [] : arr.splice(0, k)
}

// 堆排
```

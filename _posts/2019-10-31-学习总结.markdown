---
layout:     post
title:      "learing "
subtitle:   "跟着优秀的人一起学习、总结"
date:       2019-10-31 18:30:00
author:     "Thq"
header-img: "img/contact-bg.jpg"
catalog: true
tags:
    - HTML CSS JS
---

> cookie 缺点

<ul>
    <li>每次请求都会被写入header中，浪费流量</li>
    <li>没有set和get方法，需要自行封装</li>
    <li>数量和大小的限制，，每个主域名下最多20条，且每个只能4kb</li>
    <li>是明文传输，容易被攻击篡改</li>
    <li>一般不可跨域</li>
</ul>

> 如何让cookie实现跨域



> React中setState什么时候是同步的，什么时候是异步的

这里的同步和异步指的都是同步执行，并不是真正的同步异步。
异步指的是多个setState放在一起执行。
由React引发的事件处理（onClick），调用setState不会同步更新state，除此之外都会同步更新。React在调用事件处理函数之前会调用batchedUpdates函数，这个函数会把isBatchingUpdates值改为true，这个值用来判断是直接更新state还是放到队列中之后再处理。所以React控制的事件处理（包括setTimeout和setInterval产生的异步调用）不会同步更新state。</br>
关于isBatchingUpdates，默认值为false，当React的事件处理函数或者生命周期触发的时候会改为true，true的时候不会立即更新state值，当更新完成时又会恢复成false。

> 调用堆栈

Event Loop: 宏任务 setTimeour、setInterval、script  微任务 promise process.nextTick<br/>
首先进入script脚本 先执行script 遇到宏任务和微任务分别将其分配到不同的Event Queue事件队列当中，当第一个宏任务script执行完成之后、按照顺序（先进先出）调出微任务Event Loop中的事件直至当前Event Loop中所有事件都被执行完成，如果有的话。然后开始新的循环，从宏任务Event Loop中按顺序调出宏任务，执行宏任务，执行过程中遇到的宏任务与微任务按照首次的方式分配到不同的Event Loop当中，当前宏任务执行结束再按顺序调用当前的微任务Event Loop。循环，直到Event Loop都为空。
```
console.log('1');

setTimeout(function() {
    console.log('2');
    process.nextTick(function() {
        console.log('3');
    })
    new Promise(function(resolve) {
        console.log('4');
        resolve();
    }).then(function() {
        console.log('5')
    })
})
process.nextTick(function() {
    console.log('6');
})
new Promise(function(resolve) {
    console.log('7');
    resolve();
}).then(function() {
    console.log('8')
})

setTimeout(function() {
    console.log('9');
    process.nextTick(function() {
        console.log('10');
    })
    new Promise(function(resolve) {
        console.log('11');
        resolve();
    }).then(function() {
        console.log('12')
    })
})

//打印结果 1 7 6 8 2 4 3 5 9 11 10 12
```

> 基本数据类型、值类型

null undefined string number bigint symbol boolean 

基本数据类型保存在栈里，而引用类型（Function Object Array）是保存在堆当中


基本数据类型的值可以被替换 但是不会被改变

```
let bar = 'baz'
console.log(bar)  // 'baz'
bar.toUpperCase()
console.log(bar) // 'baz'
```

> 7中基本数据类型的包装对象

除了null undefined之外，其他基本数据类型都是对应的包装对象分别是String、Number、Bigint、Symbol、Boolean。 这些也是引用类型

> 自适应加载多倍图

1. 使用`picture`标签，除了IE其他主流都支持
    ```
    <picture>  
        <source srcset="photo@3x.jpg" media="(min-width: 800px)">  
        <source srcset="photo@2x.jpg" media="(min-width: 600px)">  
        <img srcset="photo.jpg">  
    </picture>
    ```
2. 使用`img`的srcset属性，除了IE其他主流都支持
    ```
    <img src="photo.png" srcset="photo@2x.png 2x, photo@3x.png 3x" alt="photo" />
    ```